// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk tipe transaksi
enum TransactionType {
  INCOME
  EXPENSE
}

// Enum untuk tipe akun budget
enum AccountType {
  BANK
  EWALLET
  CASH
  INVESTMENT
  CREDIT_CARD
}

// Model untuk pengguna
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relasi: Satu user bisa punya banyak kategori, transaksi, dan budget accounts
  categories     Category[]
  transactions   Transaction[]
  budgetAccounts BudgetAccount[]
  accounts       Account[]
  // sessions     Session[]
}

// Model untuk Kategori
model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi: Kategori ini milik satu user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi: Satu kategori bisa ada di banyak transaksi
  transactions Transaction[]

  @@unique([userId, name])
}

// Model untuk Transaksi
model Transaction {
  id              String          @id @default(cuid())
  amount          Float
  type            TransactionType
  date            DateTime
  description     String?
  userId          String
  categoryId      String
  budgetAccountId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relasi: Transaksi ini milik satu user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi: Transaksi ini masuk dalam satu kategori
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Relasi: Transaksi bisa terhubung dengan budget account
  budgetAccount BudgetAccount? @relation(fields: [budgetAccountId], references: [id], onDelete: SetNull)

  // Index untuk optimasi query performa
  @@index([userId, date(sort: Desc)]) // Untuk query recent transactions
  @@index([userId, type]) // Untuk query aggregate by type
  @@index([userId, budgetAccountId]) // Untuk query by budget account
}

// Model yang dibutuhkan oleh NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model untuk Budget Account (Akun Dana)
model BudgetAccount {
  id        String      @id @default(cuid())
  name      String // "BCA", "GoPay", "Cash", dll
  type      AccountType
  balance   Float       @default(0)
  color     String? // untuk UI customization
  icon      String? // icon identifier
  userId    String
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relasi: Budget account milik satu user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relasi: Satu budget account bisa memiliki banyak transaksi
  transactions Transaction[]

  @@unique([userId, name]) // User tidak bisa memiliki budget account dengan nama yang sama
}

// Menghapus model untuk sesi NextAuth.js
/**
 * model Session {
 * id           String   @id @default(cuid())
 * sessionToken String   @unique
 * userId       String
 * expires      DateTime
 * user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 * }
 */
